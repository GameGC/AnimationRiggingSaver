// <auto-generated/>

using System.Collections.Generic;
using UnityEngine;
using UnityEngine.Animations.Rigging;

#if UNITY_EDITOR
using UnityEditor;
using UnityEditor.SceneManagement;
#endif

namespace UnityEngine.Animations.Rigging.Saving
{
    public class MultiReferentialConstraintSaver : MonoBehaviour
    {
        [SerializeField] private List<string> transformPathes = new List<string>();
        [SerializeField] private MultiReferentialConstraint target;
        
        [SerializeField] private int AllPropertyCount;
    
        private void Awake()
        {
            var root = transform.root;
            for (int i = 0; i < AllPropertyCount; i++)
                if(!string.IsNullOrEmpty(transformPathes[i])) 
                    target.data.sourceObjects[i] = root.FindAnywhere(transformPathes[i]);

            Destroy(this);
        }
        
    #if UNITY_EDITOR
        private void OnValidate()
        {
            if (!ComponentsHelpers.CouldValidate(target)) return;
            
            transformPathes.Clear();
            AllPropertyCount = 0;
            
            int sourcesLength = target.data.sourceObjects.Count; 
            if (sourcesLength > 0)
            {
                for (int i = 0; i < sourcesLength; i++)
                {
                    if (target.data.sourceObjects[i].transform)
                        transformPathes.Add(AnimationUtility.CalculateTransformPath(target.data.sourceObjects[i].transform, transform.root));
                    else
                        transformPathes.Add(string.Empty);
                }

                AllPropertyCount += sourcesLength;
            }
        }
    
        private void Reset() => OnValidate();
    
        [MenuItem("CONTEXT/MultiReferentialConstraint/Transfer motion to smth", false, 612)]
        public static void TransferMotionToConstraint(MenuCommand command)
        {
            var sourceScript = command.context as MultiReferentialConstraint;
            var thisScript = sourceScript.gameObject.AddComponent< MultiReferentialConstraintSaver>();
            thisScript.target = sourceScript;
            thisScript.Reset();
        }
#endif
        }
    }